{"version":3,"sources":["utils/Auth.ts","utils/Api/FetchWrappers.ts","utils/Api/Services/ProfileService.ts","utils/Api/Api.ts","utils/Api/Services/AccountService.ts","utils/Api/Services/RepositoryService.ts","utils/Api/Services/ProjectService.ts","utils/Api/Services/BuildService.ts","utils/Api/Services/ReleaseService.ts","utils/Store.ts","utils/AppToaster.ts","utils/Comparers.ts","utils/NavSelection.ts","utils/Actions.ts","utils/ApiTypes.ts","components/Common/Dropdown.tsx","components/TopMenu/SelectOrganization.tsx","components/TopMenu/SelectProject.tsx","components/TopMenu/SelectTenant.tsx","components/TopMenu/TopMenu.tsx","components/Common/Table/HTMLTableNoDataRow.tsx","components/Common/Table/HTMLTableSingleHeader.tsx","utils/Utils.ts","components/Common/WithTooltip.tsx","components/Builds/BuildStatusIcon.tsx","components/Builds/History/BuildHistoryListItem.tsx","components/Common/Table/HTMLTableLoadingDataRow.tsx","components/Common/Button.tsx","components/Common/Dialog.tsx","components/Builds/History/BuildHistoryList.tsx","components/Common/Hideable.tsx","components/Builds/Queue/BuildQueue.state.ts","components/Builds/Queue/SelectBranch.tsx","components/Builds/Queue/BuildVariableList.tsx","components/Builds/Queue/BuildQueue.tsx","components/Builds/Process/BuildDefinitionStep.tsx","components/Builds/Process/BuildDefinitionPhase.tsx","components/Builds/Process/BuildDefinitionProcess.tsx","components/Builds/Definitions/BuildDefinitionListItem.tsx","components/Builds/Definitions/BuildDefinitionList.tsx","components/Releases/Approval/ReleaseApprove.tsx","components/Releases/Process/ReleaseDefinitionProcess.tsx","components/Releases/History/ReleaseHistoryList.tsx","components/Releases/Create/CreateRelease.tsx","components/Releases/Definitions/ReleaseDefinitionListItem.tsx","components/Releases/Definitions/ReleaseDefinitionList.tsx","components/Main/MainPage.tsx","components/Main/Login.tsx","components/Organizations/SuggestAddFilter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["scopes","endpoint","requiresInteraction","errorMessage","length","indexOf","app","UserAgentApplication","auth","clientId","authority","validateAuthority","cache","cacheLocation","storeAuthStateInCookie","getAccount","getToken","scope","a","request","loginPopup","acquireTokenSilent","accessToken","acquireTokenPopup","getTenants","azure","token","fetch","headers","Authorization","response","json","data","value","getHeaders","tenantId","devops","post","organizationId","url","method","mode","body","JSON","stringify","then","res","result","get","getVsrm","getVssp","Api","profileService","accountService","listAccounts","profileId","repositoryService","listRepositories","listBranches","project","repository","projectService","list","buildService","listDefinitions","listBuilds","listHistory","buildDefinitionId","trigger","id","releaseService","listApprovals","createStore","tenantFilter","parse","localStorage","getItem","tenants","account","organizations","projects","projectId","action","useSquawk","pending","usePending","AppToaster","Toaster","create","className","position","Position","TOP","showToast","message","intent","icon","show","stringCompare","b","branchCompare","isBaseVersion","Date","commit","committer","date","valueOf","tenantCompare","displayName","organizationCompare","accountName","projectCompare","name","buildDefinitionCompare","path","releaseDefinitionCompare","getNavSelection","selectionSegments","window","location","hash","substring","split","filter","segment","page","addTenantFilter","state","tenant","some","t","setItem","listTenants","f","sort","selectedTenantId","listOrganizations","profile","selectedOrganizationId","o","listProjects","selectedProjectId","p","loadSelection","_","selection","join","QueueStatus","Type","Reason","Dropdown","props","loading","size","Spinner","SIZE_SMALL","items","defaultValue","noData","onChange","currentTarget","map","item","key","text","SelectOrganization","accountId","undefined","selectOrg","SelectProject","selectProject","selectTenant","SelectTenant","domains","TopMenu","HTMLTableNoDataRow","visible","colSpan","columns","description","HTMLTableSingleHeader","children","useDateFormat","useMemo","toLocaleString","convertVariables","vars","output","Object","keys","range","start","count","step","Math","floor","Error","push","WithTooltip","element","inheritDarkTheme","content","BuildStatusIcon","status","statusIcon","color","memo","build","queueTime","finishTime","buildNumber","sourceBranch","HTMLTableLoadingDataRow","Button","tooltip","DialogHeader","Classes","DIALOG_HEADER","DialogBody","DIALOG_BODY","DialogFooterActions","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","BuildHistoryList","useState","setVisible","useAsync","history","AsyncState","Pending","loadHistory","onClick","isOpen","onClose","Hideable","Component","hidden","HideableNonIdealState","NonIdealState","HideableFormGroup","HTMLSelect","FormGroup","HideableSpinner","buildQueueReducer","SelectBranch","branches","label","labelFor","fill","branch","aheadCount","behindCount","BuildVariableList","variables","data-lpignore","autoComplete","readOnly","BuildQueue","useReducer","dispatch","prepareQueue","addToQueue","queue","definition","sourceVersion","reason","demands","parameters","disabled","type","SIZE_LARGE","title","BuildDefinitionStep","setOpen","minimal","rightIcon","inputs","input","placeholder","toString","BuildDefinitionPhase","phase","target","executionOptions","opt","steps","refName","BuildDefinitionProcess","open","process","yamlFilename","phases","latestBuild","BuildDefinitionList","projectsLoading","setLoading","definitions","setDefinitions","load","defs","useEffect","setInterval","clearInterval","bordered","striped","style","width","hours","h","minutes","m","getFutureDate","d","setMonth","getMonth","ReleaseApprove","defer","setDefer","approvals","releaseEnvironment","multiple","approval","releaseDefinition","checked","locale","dayPickerProps","firstDayOfWeek","minDate","maxDate","ReleaseDefinitionProcess","ReleaseHistoryList","CreateRelease","ReleaseDefinitionListItem","ReleaseDefinitionList","setState","Promise","all","releaseDefinitions","r","MainPage","pathSegments","selected","setSelected","selectedTabId","pathSegs","substr","panel","Login","SuggestAddFilter","find","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.397b3ee5.chunk.js","sourcesContent":["import { Configuration, UserAgentApplication } from \"msal\";\r\nimport { AzureTenant, ResponseList } from \"utils/ApiTypes\";\r\n\r\nconst msalConfig: Configuration = {\r\n    auth: {\r\n        clientId: \"0423268c-4035-4f17-a955-808798af30ad\",\r\n        authority: \"https://login.microsoftonline.com/common\",\r\n        validateAuthority: true\r\n    },\r\n    cache: {\r\n        cacheLocation: \"localStorage\",\r\n        storeAuthStateInCookie: false\r\n    }\r\n};\r\n\r\nexport enum scopes {\r\n    azure = \"https://management.azure.com/user_impersonation\",\r\n    devops = \"499b84ac-1321-427f-aa17-267ca6975798/user_impersonation\"\r\n}\r\n\r\nconst endpoint = \"https://management.azure.com/tenants?api-version=2019-06-01\";\r\n\r\nconst requiresInteraction = (errorMessage: string) => {\r\n    if (!errorMessage || !errorMessage.length) {\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        errorMessage.indexOf(\"consent_required\") !== -1 ||\r\n        errorMessage.indexOf(\"interaction_required\") !== -1 ||\r\n        errorMessage.indexOf(\"login_required\") !== -1\r\n    );\r\n};\r\n\r\nconst app = new UserAgentApplication(msalConfig);\r\n\r\nexport function getAccount() {\r\n    return app.getAccount();\r\n}\r\n\r\nexport async function getToken(\r\n    authority: string,\r\n    scope: string\r\n): Promise<string> {\r\n    const request = {\r\n        scopes: [scope],\r\n        authority: \"https://login.microsoftonline.com/\" + authority\r\n    };\r\n    if (!app.getAccount()) {\r\n        await app.loginPopup(request);\r\n    }\r\n    try {\r\n        return (await app.acquireTokenSilent(request)).accessToken;\r\n    } catch (error) {\r\n        if (requiresInteraction(error)) {\r\n            await app.loginPopup(request);\r\n            return await getToken(authority, scope);\r\n        } else {\r\n            return (await app.acquireTokenPopup(request)).accessToken;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function getTenants(): Promise<AzureTenant[]> {\r\n    const token = await getToken(\"common\", scopes.azure);\r\n    const response = await fetch(endpoint, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n\r\n    const data = (await response.json()) as ResponseList<AzureTenant>;\r\n\r\n    return data.value;\r\n}\r\n","import { getToken, scopes } from \"utils/Auth\";\r\n\r\nexport async function getHeaders(tenantId: string) {\r\n    const token = await getToken(tenantId, scopes.devops);\r\n    return {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\"\r\n    };\r\n}\r\n\r\nexport async function post<T>(\r\n    tenantId: string,\r\n    organizationId: string,\r\n    url: string,\r\n    data?: any\r\n) {\r\n    const endpoint = `https://dev.azure.com/${organizationId}/${url}`;\r\n    const headers = await getHeaders(tenantId);\r\n    const result = await fetch(endpoint, {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers,\r\n        body: JSON.stringify(data)\r\n    }).then<T>(res => res.json());\r\n    return result;\r\n}\r\n\r\nexport async function get<T>(\r\n    tenantId: string,\r\n    organizationId: string,\r\n    url: string\r\n) {\r\n    const endpoint = `https://dev.azure.com/${organizationId}/${url}`;\r\n    const headers = await getHeaders(tenantId);\r\n    const result = await fetch(endpoint, {\r\n        method: \"GET\",\r\n        mode: \"cors\",\r\n        headers\r\n    }).then<T>(res => res.json());\r\n    return result;\r\n}\r\n\r\nexport async function getVsrm<T>(\r\n    tenantId: string,\r\n    organizationId: string,\r\n    url: string\r\n) {\r\n    const endpoint = `https://vsrm.dev.azure.com/${organizationId}/${url}`;\r\n    const headers = await getHeaders(tenantId);\r\n    const result = await fetch(endpoint, {\r\n        method: \"GET\",\r\n        mode: \"cors\",\r\n        headers\r\n    }).then<T>(res => res.json());\r\n    return result;\r\n}\r\n\r\nexport async function getVssp<T>(tenantId: string, url: string) {\r\n    const token = await getToken(tenantId, scopes.devops);\r\n    const response = await fetch(`https://app.vssps.visualstudio.com/${url}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n\r\n    const result = (await response.json()) as T;\r\n    return result;\r\n}\r\n","import { getVssp } from \"../FetchWrappers\";\r\nimport { ProfileService } from \"../Interfaces\";\r\n\r\nconst profileService: ProfileService = {\r\n    async get(tenantId: string) {\r\n        return await getVssp(\r\n            tenantId,\r\n            \"_apis/profile/profiles/me?api-version=5.1\"\r\n        );\r\n    }\r\n};\r\n\r\nexport default profileService;\r\n","import profileService from \"./Services/ProfileService\";\r\nimport ApiService from \"./Interfaces\";\r\nimport accountService from \"./Services/AccountService\";\r\nimport repositoryService from \"./Services/RepositoryService\";\r\nimport projectService from \"./Services/ProjectService\";\r\nimport buildService from \"./Services/BuildService\";\r\nimport releaseService from \"./Services/ReleaseService\";\r\n\r\nconst Api: ApiService = {\r\n    profileService,\r\n    accountService,\r\n    repositoryService,\r\n    projectService,\r\n    buildService,\r\n    releaseService\r\n};\r\n\r\nexport default Api;\r\n","import { getVssp } from \"../FetchWrappers\";\r\nimport { ResponseList, Organization } from \"utils/ApiTypes\";\r\nimport { AccountService } from \"../Interfaces\";\r\n\r\nconst accountService: AccountService = {\r\n    async listAccounts(tenantId: string, profileId: string) {\r\n        const response = await getVssp<ResponseList<Organization>>(\r\n            tenantId,\r\n            `_apis/accounts?memberId=${profileId}&api-version=5.1`\r\n        );\r\n        return response.value;\r\n    }\r\n};\r\n\r\nexport default accountService;\r\n","import { RepositoryService } from \"../Interfaces\";\r\nimport { ResponseList, Branch } from \"utils/ApiTypes\";\r\nimport { get } from \"../FetchWrappers\";\r\n\r\nconst repositoryService: RepositoryService = {\r\n    listRepositories() {},\r\n    async listBranches(\r\n        tenantId: string,\r\n        organizationId: string,\r\n        project: string,\r\n        repository: string\r\n    ) {\r\n        const result = await get<ResponseList<Branch>>(\r\n            tenantId,\r\n            organizationId,\r\n            `${project}/_apis/git/repositories/${repository}/stats/branches?api-version=5.1`\r\n        );\r\n\r\n        return result.value;\r\n    }\r\n};\r\n\r\nexport default repositoryService;\r\n","import { get } from \"../FetchWrappers\";\r\nimport { ResponseList, Project as IProject } from \"utils/ApiTypes\";\r\nimport { ProjectService } from \"../Interfaces\";\r\n\r\nconst projectService: ProjectService = {\r\n    async list(tenantId: string, organizationId: string) {\r\n        const response = await get<ResponseList<IProject>>(\r\n            tenantId,\r\n            organizationId,\r\n            `_apis/projects?api-version=5.1`\r\n        );\r\n\r\n        return response.value;\r\n    }\r\n};\r\n\r\nexport default projectService;\r\n","import { BuildService } from \"../Interfaces\";\r\nimport { get, post } from \"../FetchWrappers\";\r\nimport {\r\n    ResponseList,\r\n    BuildDefinition,\r\n    Build,\r\n    BuildRequest\r\n} from \"utils/ApiTypes\";\r\n\r\nconst buildService: BuildService = {\r\n    async listDefinitions(\r\n        tenantId: string,\r\n        organizationId: string,\r\n        project: string\r\n    ) {\r\n        const response = await get<ResponseList<BuildDefinition>>(\r\n            tenantId,\r\n            organizationId,\r\n            `${project}/_apis/build/definitions?includeAllProperties=true&includeLatestBuilds=true&api-version=5.1`\r\n        );\r\n\r\n        return response.value;\r\n    },\r\n    async listBuilds(\r\n        tenantId: string,\r\n        organizationId: string,\r\n        project: string\r\n    ) {\r\n        const response = await get<ResponseList<Build>>(\r\n            tenantId,\r\n            organizationId,\r\n            `${project}/_apis/build/builds?maxBuildsPerDefinition=1&deletedFilter=excludeDeleted&api-version=5.1`\r\n        );\r\n\r\n        return response.value;\r\n    },\r\n    async listHistory(\r\n        tenantId: string,\r\n        organizationId: string,\r\n        project: string,\r\n        buildDefinitionId: number\r\n    ) {\r\n        const response = await get<ResponseList<Build>>(\r\n            tenantId,\r\n            organizationId,\r\n            `${project}/_apis/build/builds?definitions=${buildDefinitionId}&api-version=5.1`\r\n        );\r\n\r\n        return response.value;\r\n    },\r\n    async trigger(\r\n        tenantId: string,\r\n        organizationId: string,\r\n        request: BuildRequest\r\n    ) {\r\n        return await post<Build>(\r\n            tenantId,\r\n            organizationId,\r\n            `${request.project.id}/_apis/build/builds?ignoreWarnings=false&api-version=5.1`,\r\n            request\r\n        );\r\n    }\r\n};\r\n\r\nexport default buildService;\r\n","import { ReleaseService } from \"../Interfaces\";\r\nimport { getVsrm } from \"../FetchWrappers\";\r\nimport { ResponseList, ReleaseDefinition, Approval } from \"utils/ApiTypes\";\r\n\r\nconst releaseService: ReleaseService = {\r\n  // getDefinition\r\n  async listDefinitions(\r\n    tenantId: string,\r\n    organizationId: string,\r\n    project: string\r\n  ) {\r\n    const result = await getVsrm<ResponseList<ReleaseDefinition>>(\r\n      tenantId,\r\n      organizationId,\r\n      `${project}/_apis/release/definitions?api-version=5.1`\r\n    );\r\n\r\n    return result.value;\r\n  },\r\n\r\n  async listApprovals(\r\n    tenantId: string,\r\n    organizationId: string,\r\n    project: string\r\n  ) {\r\n    const result = await getVsrm<ResponseList<Approval>>(\r\n      tenantId,\r\n      organizationId,\r\n      `${project}/_apis/release/approvals?api-version=5.1`\r\n    );\r\n\r\n    return result.value;\r\n  }\r\n};\r\n\r\nexport default releaseService;\r\n","import createStore from \"squawk-react\";\r\nimport { Project, AzureTenant, Organization } from \"utils/ApiTypes\";\r\nimport {\r\n  ProjectService,\r\n  BuildService,\r\n  RepositoryService,\r\n  ReleaseService,\r\n  ProfileService,\r\n  AccountService\r\n} from \"utils/Api/Interfaces\";\r\nimport { Account } from \"msal\";\r\nimport { getAccount } from \"utils/Auth\";\r\nimport Api from \"./Api/Api\";\r\n\r\ninterface AppState {\r\n  tenantFilter: AzureTenant[];\r\n  tenants: AzureTenant[];\r\n  tenantId: string | null;\r\n  account: Account;\r\n  organizations: Organization[];\r\n  organizationId: string | null;\r\n  projects: Project[];\r\n  projectId: string | null;\r\n  projectService: ProjectService;\r\n  buildService: BuildService;\r\n  repositoryService: RepositoryService;\r\n  releaseService: ReleaseService;\r\n  profileService: ProfileService;\r\n  accountService: AccountService;\r\n}\r\n\r\nexport const { action, useSquawk, pending, usePending } = createStore<AppState>(\r\n  {\r\n    tenantFilter: JSON.parse(localStorage.getItem(\"tenantFilter\")!) || [],\r\n    tenants: [],\r\n    tenantId: null,\r\n    account: getAccount(),\r\n    organizations: [],\r\n    organizationId: null,\r\n    projects: [],\r\n    projectId: null,\r\n    projectService: Api.projectService,\r\n    buildService: Api.buildService,\r\n    repositoryService: Api.repositoryService,\r\n    releaseService: Api.releaseService,\r\n    profileService: Api.profileService,\r\n    accountService: Api.accountService\r\n  }\r\n);\r\n","import { Position, Toaster, IToastProps } from \"@blueprintjs/core\";\r\n\r\n/** Singleton toaster instance. Create separate instances for different options. */\r\nconst AppToaster = Toaster.create({\r\n    className: \"recipe-toaster\",\r\n    position: Position.TOP\r\n});\r\n\r\nconst showToast = (\r\n    message: string,\r\n    intent: IToastProps[\"intent\"],\r\n    icon?: IToastProps[\"icon\"]\r\n) => {\r\n    AppToaster.show({\r\n        message,\r\n        intent,\r\n        icon\r\n    });\r\n};\r\n\r\nexport default showToast;\r\n","import {\r\n  Branch,\r\n  AzureTenant,\r\n  Organization,\r\n  Project,\r\n  BuildDefinition,\r\n  ReleaseDefinition\r\n} from \"utils/ApiTypes\";\r\n\r\nexport const stringCompare = (a: string, b: string) => {\r\n  return a > b ? 1 : a < b ? -1 : 0;\r\n};\r\n\r\nexport const branchCompare = (a: Branch, b: Branch) => {\r\n  return (\r\n    (a.isBaseVersion ? -1 : 1) - (b.isBaseVersion ? -1 : 1) ||\r\n    new Date(b.commit.committer.date).valueOf() -\r\n      new Date(a.commit.committer.date).valueOf()\r\n  );\r\n};\r\n\r\nexport const tenantCompare = (a: AzureTenant, b: AzureTenant) =>\r\n  stringCompare(a.displayName, b.displayName);\r\n\r\nexport const organizationCompare = (a: Organization, b: Organization) =>\r\n  stringCompare(a.accountName, b.accountName);\r\n\r\nexport const projectCompare = (a: Project, b: Project) =>\r\n  stringCompare(a.name, b.name);\r\n\r\nexport const buildDefinitionCompare = (\r\n  a: BuildDefinition,\r\n  b: BuildDefinition\r\n) => stringCompare(a.path, b.path) || stringCompare(a.name, b.name);\r\n\r\nexport const releaseDefinitionCompare = (\r\n  a: ReleaseDefinition,\r\n  b: ReleaseDefinition\r\n) => stringCompare(a.path, b.path) || stringCompare(a.name, b.name);\r\n","const getNavSelection = () => {\r\n    const selectionSegments = window.location.hash\r\n        .substring(1)\r\n        .split(\"/\")\r\n        .filter(segment => segment !== \"\");\r\n\r\n    return {\r\n        tenantId: selectionSegments[0],\r\n        organizationId: selectionSegments[1],\r\n        projectId: selectionSegments[2],\r\n        page: selectionSegments[3] || \"builds\"\r\n    };\r\n};\r\n\r\nexport default getNavSelection;\r\n","import { action, pending } from \"utils/Store\";\r\nimport { getTenants, getAccount } from \"utils/Auth\";\r\nimport { AzureTenant } from \"utils/ApiTypes\";\r\nimport showToast from \"utils/AppToaster\";\r\nimport {\r\n  tenantCompare,\r\n  organizationCompare,\r\n  projectCompare\r\n} from \"./Comparers\";\r\nimport getNavSelection from \"./NavSelection\";\r\n\r\nexport const addTenantFilter = action<AzureTenant>((state, tenant) => {\r\n  if (state.tenantFilter.some(t => t.tenantId === tenant.tenantId)) {\r\n    showToast(\"That tenant was already filtered, sorry about that\", \"warning\");\r\n    return {};\r\n  }\r\n\r\n  showToast(\r\n    \"Filter added, please reload page if the filter fails to apply\",\r\n    \"success\"\r\n  );\r\n  const tenantFilter = [...state.tenantFilter, tenant];\r\n\r\n  localStorage.setItem(\"tenantFilter\", JSON.stringify(tenantFilter));\r\n\r\n  return { tenantFilter };\r\n});\r\n\r\nexport const listTenants = action(async state => {\r\n  pending([\"tenants\", \"organizations\", \"projects\"], true);\r\n  const tenants = (await getTenants())\r\n    .filter(t => !state.tenantFilter.some(f => f.tenantId === t.tenantId))\r\n    .sort(tenantCompare);\r\n\r\n  pending([\"tenants\", \"organizations\", \"projects\"], false);\r\n\r\n  const { tenantId } = getNavSelection();\r\n\r\n  const selectedTenantId =\r\n    tenants.length > 0\r\n      ? tenants.some(t => t.tenantId === tenantId)\r\n        ? tenantId\r\n        : tenants[0].tenantId\r\n      : null;\r\n\r\n  return {\r\n    tenants,\r\n    account: getAccount(),\r\n    tenantId: selectedTenantId\r\n  };\r\n});\r\n\r\nexport const listOrganizations = action<string>(async (state, tenantId) => {\r\n  pending([\"organizations\", \"projects\"], true);\r\n  const profile = await state.profileService.get(tenantId);\r\n  const organizations = (\r\n    await state.accountService.listAccounts(tenantId, profile.id)\r\n  ).sort(organizationCompare);\r\n\r\n  const { organizationId } = getNavSelection();\r\n\r\n  const selectedOrganizationId =\r\n    organizations.length > 0\r\n      ? organizations.some(o => o.accountName === organizationId)\r\n        ? organizationId\r\n        : organizations[0].accountName\r\n      : null;\r\n\r\n  pending([\"organizations\", \"projects\"], false);\r\n  return {\r\n    organizations,\r\n    tenantId,\r\n    organizationId: selectedOrganizationId\r\n  };\r\n});\r\n\r\nexport const listProjects = action<{\r\n  tenantId: string;\r\n  organizationId: string;\r\n}>(async ({ projectService }, { tenantId, organizationId }) => {\r\n  pending([\"projects\"], true);\r\n  try {\r\n    const projects = (await projectService.list(tenantId, organizationId)).sort(\r\n      projectCompare\r\n    );\r\n\r\n    const { projectId } = getNavSelection();\r\n\r\n    const selectedProjectId =\r\n      projects.length > 0\r\n        ? projects.some(p => p.id === projectId)\r\n          ? projectId\r\n          : projects[0].id\r\n        : null;\r\n\r\n    return {\r\n      tenantId,\r\n      projects,\r\n      organizationId,\r\n      projectId: selectedProjectId\r\n    };\r\n  } catch {\r\n  } finally {\r\n    pending([\"projects\"], false);\r\n  }\r\n  return {};\r\n});\r\n\r\ntype Selection = {\r\n  tenantId?: string;\r\n  organizationId?: string;\r\n  projectId?: string;\r\n};\r\n\r\nexport const loadSelection = action<Selection>(async (_, selection) => {\r\n  if (!selection.tenantId) {\r\n    const { tenantId } = await listTenants();\r\n    if (!tenantId) {\r\n      return {};\r\n    }\r\n    selection.tenantId = tenantId!;\r\n  }\r\n\r\n  if (!selection.organizationId) {\r\n    const { organizationId } = await listOrganizations(selection.tenantId);\r\n    if (!organizationId) {\r\n      return {};\r\n    }\r\n    selection.organizationId = organizationId;\r\n  }\r\n\r\n  if (!selection.projectId) {\r\n    const { projectId } = await listProjects({\r\n      tenantId: selection.tenantId!,\r\n      organizationId: selection.organizationId!\r\n    });\r\n    if (!projectId) {\r\n      return {};\r\n    }\r\n    selection.projectId = projectId;\r\n  }\r\n\r\n  const { page } = getNavSelection();\r\n\r\n  window.location.hash = [\r\n    selection.tenantId,\r\n    selection.organizationId,\r\n    selection.projectId,\r\n    page\r\n  ].join(\"/\");\r\n\r\n  return selection;\r\n});\r\n\r\nif (getAccount()) {\r\n  loadSelection({});\r\n}\r\n","export interface ResponseList<T> {\r\n  count: number;\r\n  value: T[];\r\n}\r\n\r\nexport const LOADING = true;\r\nexport const LOADING_COMPLETE = false;\r\n\r\nexport const VISIBLE = true;\r\nexport const HIDDEN = false;\r\n\r\nexport interface AzureTenant {\r\n  id: string;\r\n  tenantId: string;\r\n  countryCode: string;\r\n  displayName: string;\r\n  domains: string[];\r\n  tenantCategory: string;\r\n}\r\n\r\nexport interface Profile {\r\n  displayName: string;\r\n  publicAlias: string;\r\n  emailAddress: string;\r\n  coreRevision: number;\r\n  timeStamp: string;\r\n  id: string;\r\n  revision: number;\r\n}\r\n\r\nexport interface Organization {\r\n  accountId: string;\r\n  accountUri: string;\r\n  accountName: string;\r\n  properties: any;\r\n}\r\n\r\nexport interface Project {\r\n  id: string;\r\n  name: string;\r\n  url: string;\r\n  state: string;\r\n  revision: number;\r\n  visibility: string;\r\n  lastUpdateTime: string;\r\n  description?: string;\r\n}\r\n\r\nexport interface BuildDefinition {\r\n  _links: ValueLinks;\r\n  quality: string;\r\n  authoredBy: User;\r\n  id: number;\r\n  name: string;\r\n  url: string;\r\n  uri: string;\r\n  path: string;\r\n  type: Type;\r\n  queueStatus: QueueStatus;\r\n  revision: number;\r\n  createdDate: Date;\r\n  project: Project;\r\n  process: Process;\r\n  repository: Repository;\r\n  variables: Variables;\r\n  queue: Queue;\r\n  latestBuild: Build;\r\n}\r\n\r\nexport interface ValueLinks {\r\n  [key: string]: { href: string };\r\n}\r\n\r\nexport interface User {\r\n  displayName: string;\r\n  url: string;\r\n  _links: ValueLinks;\r\n  id: string;\r\n  uniqueName: string;\r\n  imageUrl: string;\r\n  descriptor: string;\r\n}\r\n\r\nexport enum QueueStatus {\r\n  Enabled = \"enabled\",\r\n  Disabled = \"disabled\"\r\n}\r\n\r\nexport enum Type {\r\n  Build = \"build\"\r\n}\r\n\r\nexport interface Build {\r\n  _links: ValueLinks;\r\n  properties: any;\r\n  tags: any[];\r\n  validationResults: any[];\r\n  plans: Plan[];\r\n  triggerInfo: any;\r\n  id: number;\r\n  buildNumber: string;\r\n  status: BuildStatus;\r\n  result: BuildResult;\r\n  queueTime: string;\r\n  startTime: string;\r\n  finishTime: string;\r\n  url: string;\r\n  definition: BuildDefinition;\r\n  buildNumberRevision: number;\r\n  project: Project;\r\n  uri: string;\r\n  sourceBranch: string;\r\n  sourceVersion: string;\r\n  queue: Queue;\r\n  priority: string;\r\n  reason: Reason;\r\n  requestedFor: User;\r\n  requestedBy: User;\r\n  lastChangedDate: Date;\r\n  lastChangedBy: User;\r\n  orchestrationPlan: Plan;\r\n  logs: Logs;\r\n  repository: Repository;\r\n  keepForever: boolean;\r\n  retainedByRelease: boolean;\r\n  parameters?: string;\r\n}\r\n\r\nexport interface Plan {\r\n  planId: string;\r\n}\r\n\r\nexport interface Logs {\r\n  id: number;\r\n  type: string;\r\n  url: string;\r\n}\r\n\r\nexport interface Queue {\r\n  id: number;\r\n  name: string;\r\n  pool: Pool;\r\n}\r\n\r\nexport interface Pool {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\nexport interface Repository {\r\n  id: string;\r\n  type: string;\r\n  name: string;\r\n  url: string;\r\n  defaultBranch: string;\r\n  clean: string;\r\n  checkoutSubmodules: boolean;\r\n}\r\n\r\nexport interface Branch {\r\n  commit: Commit;\r\n  name: string;\r\n  aheadCount: number;\r\n  behindCount: number;\r\n  isBaseVersion: boolean;\r\n}\r\n\r\nexport interface Commit {\r\n  commitId: string;\r\n  author: Author;\r\n  committer: Author;\r\n  comment: string;\r\n  url: string;\r\n  treeId?: string;\r\n  parents?: string[];\r\n}\r\n\r\nexport interface Author {\r\n  name: string;\r\n  email: string;\r\n  date: string;\r\n}\r\n\r\nexport enum Reason {\r\n  Manual = \"manual\",\r\n  Schedule = \"schedule\"\r\n}\r\n\r\nexport type BuildStatus =\r\n  | \"all\"\r\n  | \"cancelling\"\r\n  | \"completed\"\r\n  | \"inProgress\"\r\n  | \"none\"\r\n  | \"notStarted\"\r\n  | \"postponed\";\r\n\r\nexport type BuildResult =\r\n  | \"canceled\"\r\n  | \"failed\"\r\n  | \"none\"\r\n  | \"partiallySucceeded\"\r\n  | \"succeeded\";\r\n\r\nexport interface BuildRequest {\r\n  queue: Id;\r\n  definition: Id;\r\n  project: Id;\r\n  sourceBranch: string;\r\n  sourceVersion: string;\r\n  parameters: string;\r\n}\r\n\r\nexport interface Id {\r\n  id: number | string;\r\n}\r\n\r\nexport interface Variables {\r\n  [key: string]: Variable;\r\n}\r\n\r\nexport interface Variable {\r\n  value: string;\r\n  allowOverride: boolean;\r\n}\r\n\r\nexport interface ReleaseDefinition {\r\n  source: string;\r\n  revision: number;\r\n  description: string;\r\n  createdBy: User;\r\n  createdOn: string;\r\n  modifiedBy: User;\r\n  modifiedOn: string;\r\n  isDeleted: boolean;\r\n  variableGroups: any;\r\n  releaseNameFormat: string;\r\n  properties: any;\r\n  id: number;\r\n  name: string;\r\n  path: string;\r\n  projectReference: any;\r\n  url: string;\r\n  _links: ValueLinks;\r\n}\r\n\r\nexport interface Process {\r\n  phases?: Phase[];\r\n  type: number;\r\n  yamlFilename?: string;\r\n}\r\n\r\nexport interface Phase {\r\n  steps: Step[];\r\n  name: string;\r\n  refName: string;\r\n  condition: string;\r\n  target: Target;\r\n  jobAuthorizationScope: string;\r\n  jobCancelTimeoutInMinutes?: number;\r\n}\r\n\r\nexport interface ExecutionOptions {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface Target {\r\n  executionOptions: ExecutionOptions;\r\n  allowScriptsAuthAccessOption: boolean;\r\n  type: number;\r\n}\r\n\r\nexport interface Step {\r\n  environment: any;\r\n  enabled: boolean;\r\n  continueOnError: boolean;\r\n  alwaysRun: boolean;\r\n  displayName: string;\r\n  timeoutInMinutes: number;\r\n  condition?: string;\r\n  task: Task;\r\n  inputs: { [key: string]: string };\r\n}\r\n\r\nexport interface Task {\r\n  id: string;\r\n  versionSpec: string;\r\n  definitionType: string;\r\n}\r\n\r\nexport interface Approval {\r\n  id: number;\r\n  revision: number;\r\n  approver: User;\r\n  approvalType: string;\r\n  createdOn: Date;\r\n  modifiedOn: Date;\r\n  status: string;\r\n  comments: string;\r\n  isAutomated: boolean;\r\n  isNotificationOn: boolean;\r\n  trialNumber: number;\r\n  attempt: number;\r\n  rank: number;\r\n  release: Resource;\r\n  releaseDefinition: ReleaseDefinition;\r\n  releaseEnvironment: Resource;\r\n  url: string;\r\n}\r\n\r\nexport interface Resource {\r\n  id: number;\r\n  name: string;\r\n  url: string;\r\n  _links: ValueLinks;\r\n}\r\n","import React from \"react\";\r\nimport { Spinner } from \"@blueprintjs/core\";\r\n\r\ninterface DropdownItem<T extends string | number> {\r\n    key: string | number;\r\n    value: T;\r\n    text: string;\r\n}\r\n\r\ninterface Props<T extends string | number> {\r\n    items: DropdownItem<T>[];\r\n    value?: T;\r\n    onChange: (value: T) => void;\r\n    loading: boolean;\r\n    noData: string;\r\n}\r\n\r\nconst Dropdown = <T extends string | number>(props: Props<T>) => {\r\n    if (props.loading) {\r\n        return (\r\n            <div>\r\n                <Spinner size={Spinner.SIZE_SMALL} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (props.items.length === 0) {\r\n        return (\r\n            <div className=\"bp3-select\">\r\n                <select defaultValue=\"nodata\">\r\n                    <option value=\"nodata\">{props.noData}</option>\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"bp3-select\">\r\n            <select\r\n                value={props.value}\r\n                onChange={({ currentTarget: { value } }) =>\r\n                    props.onChange(value as any)\r\n                }\r\n            >\r\n                {props.items.map(item => (\r\n                    <option key={item.key} value={item.value}>\r\n                        {item.text}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\nimport { useSquawk, usePending } from \"utils/Store\";\r\nimport { loadSelection } from \"utils/Actions\";\r\nimport Dropdown from \"components/Common/Dropdown\";\r\n\r\nconst selectOrg = (tenantId: string, organizationId: string) => {\r\n  loadSelection({ tenantId, organizationId });\r\n};\r\n\r\nconst SelectOrganization = () => {\r\n  const { organizations, tenantId, organizationId } = useSquawk(\r\n    \"organizations\",\r\n    \"tenantId\",\r\n    \"organizationId\"\r\n  );\r\n  const loading = usePending(\"organizations\");\r\n\r\n  const items = organizations.map(o => ({\r\n    key: o.accountId,\r\n    value: o.accountName,\r\n    text: o.accountName\r\n  }));\r\n\r\n  return (\r\n    <Dropdown<string>\r\n      loading={loading}\r\n      value={organizationId || undefined}\r\n      items={items}\r\n      onChange={value => selectOrg(tenantId!, value)}\r\n      noData=\"No Azure DevOps organizations found in tenant\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default SelectOrganization;\r\n","import React from \"react\";\r\nimport { useSquawk, usePending } from \"utils/Store\";\r\nimport { loadSelection } from \"utils/Actions\";\r\nimport Dropdown from \"components/Common/Dropdown\";\r\n\r\nconst selectProject = (\r\n  tenantId: string,\r\n  organizationId: string,\r\n  projectId: string\r\n) => {\r\n  loadSelection({ tenantId, organizationId, projectId });\r\n};\r\n\r\nconst SelectProject = () => {\r\n  const { projects, tenantId, organizationId, projectId } = useSquawk(\r\n    \"projects\",\r\n    \"tenantId\",\r\n    \"organizationId\",\r\n    \"projectId\"\r\n  );\r\n  const loading = usePending(\"projects\");\r\n\r\n  const items = projects.map(p => ({\r\n    key: p.id,\r\n    value: p.id,\r\n    text: p.name\r\n  }));\r\n\r\n  return (\r\n    <Dropdown<string>\r\n      items={items}\r\n      onChange={value => selectProject(tenantId!, organizationId!, value)}\r\n      loading={loading}\r\n      noData=\"No projects found\"\r\n      value={projectId || undefined}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SelectProject;\r\n","import React from \"react\";\r\nimport { useSquawk, usePending } from \"utils/Store\";\r\nimport { loadSelection } from \"utils/Actions\";\r\nimport Dropdown from \"components/Common/Dropdown\";\r\n\r\nconst selectTenant = async (tenantId: string) => {\r\n  loadSelection({ tenantId });\r\n};\r\n\r\nconst SelectTenant = () => {\r\n  const { tenants, tenantId } = useSquawk(\"tenants\", \"tenantId\");\r\n  const loading = usePending(\"tenants\");\r\n\r\n  const items = tenants.map(t => ({\r\n    key: t.tenantId,\r\n    value: t.tenantId,\r\n    text: `${t.displayName} (${t.domains[t.domains.length - 1]})`\r\n  }));\r\n\r\n  return (\r\n    <Dropdown<string>\r\n      loading={loading}\r\n      value={tenantId || undefined}\r\n      items={items}\r\n      onChange={tenant => selectTenant(tenant)}\r\n      noData=\"No Azure tenants found\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default SelectTenant;\r\n","import React from \"react\";\r\nimport {\r\n    Navbar,\r\n    NavbarGroup,\r\n    NavbarHeading,\r\n    NavbarDivider\r\n} from \"@blueprintjs/core\";\r\nimport SelectOrganization from \"./SelectOrganization\";\r\nimport SelectProject from \"./SelectProject\";\r\nimport SelectTenant from \"./SelectTenant\";\r\n\r\nconst TopMenu = () => {\r\n    return (\r\n        <Navbar>\r\n            <NavbarGroup>\r\n                <NavbarHeading>ez-build</NavbarHeading>\r\n                <NavbarDivider />\r\n                <SelectTenant />\r\n                <NavbarDivider />\r\n                <SelectOrganization />\r\n                <NavbarDivider />\r\n                <SelectProject />\r\n            </NavbarGroup>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default TopMenu;\r\n","import React from \"react\";\r\nimport { NonIdealState } from \"@blueprintjs/core\";\r\n\r\ninterface Props {\r\n    visible: boolean;\r\n    columns: number;\r\n    text: string;\r\n}\r\n\r\nconst HTMLTableNoDataRow = (props: Props) => {\r\n    if (!props.visible) {\r\n        return null;\r\n    }\r\n    return (\r\n        <tr>\r\n            <td colSpan={props.columns} className=\"cell-center\">\r\n                <NonIdealState description={props.text} />\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default HTMLTableNoDataRow;\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n    children: React.ReactNode;\r\n}\r\n\r\nconst HTMLTableSingleHeader = (props: Props) => {\r\n    return (\r\n        <thead>\r\n            <tr>{props.children}</tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\nexport default HTMLTableSingleHeader;\r\n","import { useMemo } from \"react\";\r\nimport { Variables } from \"utils/ApiTypes\";\r\n\r\nexport const useDateFormat = (date: string) => {\r\n  return useMemo(() => (!!date ? new Date(date).toLocaleString(\"sv-SE\") : \"\"), [\r\n    date\r\n  ]);\r\n};\r\n\r\nexport const convertVariables = (vars: Variables) => {\r\n  const output: { [key: string]: any } = {};\r\n  if (!vars) {\r\n    return output;\r\n  }\r\n  for (const key of Object.keys(vars)) {\r\n    output[key] = vars[key].value;\r\n  }\r\n  return output;\r\n};\r\n\r\nexport const range = (start: number, count: number, step: number = 1) => {\r\n  if (count < 0 || count !== Math.floor(count)) {\r\n    throw new Error(\"Expected count to be a positive integer\");\r\n  }\r\n  const result: number[] = [];\r\n  while (count-- > 0) {\r\n    result.push(start);\r\n    start += step;\r\n  }\r\n  return result;\r\n};\r\n","import React from \"react\";\r\nimport { Tooltip } from \"@blueprintjs/core\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    element: JSX.Element;\r\n}\r\n\r\nexport const WithTooltip = ({ text, element }: Props) => {\r\n    return (\r\n        <Tooltip inheritDarkTheme content={text}>\r\n            {element}\r\n        </Tooltip>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { BuildResult, BuildStatus } from \"utils/ApiTypes\";\r\nimport { Icon } from \"@blueprintjs/core\";\r\nimport { WithTooltip } from \"components/Common/WithTooltip\";\r\n\r\ninterface Props {\r\n    result: BuildResult;\r\n    status: BuildStatus;\r\n}\r\n\r\nconst BuildStatusIcon = ({ result, status }: Props) => {\r\n    if (status !== \"completed\") {\r\n        const statusIcon =\r\n            status === \"cancelling\"\r\n                ? \"stop\"\r\n                : status === \"inProgress\"\r\n                ? \"play\"\r\n                : status === \"notStarted\"\r\n                ? \"time\"\r\n                : undefined;\r\n\r\n        return (\r\n            <WithTooltip text={status} element={<Icon icon={statusIcon} />} />\r\n        );\r\n    }\r\n\r\n    const icon =\r\n        result === \"failed\"\r\n            ? \"error\"\r\n            : result === \"canceled\"\r\n            ? \"ban-circle\"\r\n            : result === \"partiallySucceeded\"\r\n            ? \"tick\"\r\n            : result === \"succeeded\"\r\n            ? \"tick\"\r\n            : undefined;\r\n\r\n    const color =\r\n        result === \"succeeded\"\r\n            ? \"success\"\r\n            : result === \"partiallySucceeded\"\r\n            ? \"warning\"\r\n            : \"danger\";\r\n\r\n    return (\r\n        <WithTooltip\r\n            text={result}\r\n            element={<Icon icon={icon} intent={color} />}\r\n        />\r\n    );\r\n};\r\n\r\nexport default BuildStatusIcon;\r\n","import React, { memo } from \"react\";\r\nimport { Build } from \"utils/ApiTypes\";\r\nimport { useDateFormat } from \"utils/Utils\";\r\nimport BuildStatusIcon from \"components/Builds/BuildStatusIcon\";\r\n\r\nconst BuildHistoryListItem = ({ item: build }: { item: Build }) => {\r\n    const queueTime = useDateFormat(build.queueTime);\r\n    const finishTime = useDateFormat(build.finishTime);\r\n    return (\r\n        <tr>\r\n            <td>{build.buildNumber}</td>\r\n            <td>\r\n                <BuildStatusIcon result={build.result} status={build.status} />\r\n            </td>\r\n            <td>{queueTime}</td>\r\n            <td>{finishTime}</td>\r\n            <td>{build.sourceBranch}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default memo(BuildHistoryListItem);\r\n","import React from \"react\";\r\nimport { Spinner } from \"@blueprintjs/core\";\r\n\r\ninterface Props {\r\n    visible: boolean;\r\n    columns: number;\r\n    size: number;\r\n}\r\n\r\nconst HTMLTableLoadingDataRow = (props: Props) => {\r\n    if (!props.visible) {\r\n        return null;\r\n    }\r\n    return (\r\n        <tr>\r\n            <td colSpan={props.columns} className=\"cell-center\">\r\n                <Spinner size={props.size} />\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default HTMLTableLoadingDataRow;\r\n","import React from \"react\";\r\nimport { Button as BPButton, IButtonProps, Tooltip } from \"@blueprintjs/core\";\r\n\r\nconst Button = (\r\n    props: IButtonProps &\r\n        React.HTMLAttributes<HTMLButtonElement> & { tooltip?: string }\r\n) => {\r\n    if (!props.tooltip) {\r\n        return <BPButton {...props}>{props.children}</BPButton>;\r\n    }\r\n    return (\r\n        <Tooltip inheritDarkTheme content={props.tooltip}>\r\n            <BPButton {...props}>{props.children}</BPButton>\r\n        </Tooltip>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\n\r\ninterface Props {\r\n    content: React.ReactNode;\r\n}\r\n\r\ninterface PropsWithChildren {\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport const DialogHeader = (props: Props) => {\r\n    return <div className={Classes.DIALOG_HEADER}>{props.content}</div>;\r\n};\r\n\r\nexport const DialogBody = (props: PropsWithChildren) => {\r\n    return <div className={Classes.DIALOG_BODY}>{props.children}</div>;\r\n};\r\n\r\nexport const DialogFooterActions = (props: PropsWithChildren) => {\r\n    return (\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Dialog, HTMLTable } from \"@blueprintjs/core\";\r\nimport { useSquawk } from \"utils/Store\";\r\nimport { HIDDEN, VISIBLE } from \"utils/ApiTypes\";\r\nimport BuildHistoryListItem from \"./BuildHistoryListItem\";\r\nimport HTMLTableSingleHeader from \"components/Common/Table/HTMLTableSingleHeader\";\r\nimport HTMLTableNoDataRow from \"components/Common/Table/HTMLTableNoDataRow\";\r\nimport HTMLTableLoadingDataRow from \"components/Common/Table/HTMLTableLoadingDataRow\";\r\nimport Button from \"components/Common/Button\";\r\nimport { DialogHeader, DialogBody } from \"components/Common/Dialog\";\r\nimport useAsync, { AsyncState } from \"react-hooks-useasync\";\r\n\r\ninterface Props {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nconst BuildHistoryList = (props: Props) => {\r\n    const [visible, setVisible] = useState(HIDDEN);\r\n\r\n    const { buildService, organizationId, projectId, tenantId } = useSquawk(\r\n        \"buildService\",\r\n        \"organizationId\",\r\n        \"projectId\",\r\n        \"tenantId\"\r\n    );\r\n\r\n    const [history, state, listHistory] = useAsync(\r\n        buildService.listHistory,\r\n        []\r\n    );\r\n\r\n    const loading = state === AsyncState.Pending;\r\n\r\n    const loadHistory = async () => {\r\n        setVisible(VISIBLE);\r\n        listHistory(tenantId!, organizationId!, projectId!, props.id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                tooltip=\"View history\"\r\n                icon=\"history\"\r\n                onClick={loadHistory}\r\n            />\r\n            <Dialog\r\n                isOpen={visible}\r\n                onClose={() => setVisible(false)}\r\n                className=\"bp3-dark large-dialog scroll-dialog\"\r\n            >\r\n                <DialogHeader content={`Build history for ${props.name}`} />\r\n                <DialogBody>\r\n                    <Button\r\n                        icon=\"refresh\"\r\n                        onClick={loadHistory}\r\n                        tooltip=\"Refresh\"\r\n                    />\r\n                    <HTMLTable>\r\n                        <HTMLTableSingleHeader>\r\n                            <th>ID</th>\r\n                            <th>Result</th>\r\n                            <th>Queued</th>\r\n                            <th>Completed</th>\r\n                            <th>Branch</th>\r\n                        </HTMLTableSingleHeader>\r\n                        <tbody>\r\n                            <HTMLTableLoadingDataRow\r\n                                columns={5}\r\n                                visible={loading}\r\n                                size={100}\r\n                            />\r\n                            <HTMLTableNoDataRow\r\n                                columns={5}\r\n                                visible={!loading && history.length === 0}\r\n                                text=\"Found no previous builds\"\r\n                            />\r\n                            {history.map(item => (\r\n                                <BuildHistoryListItem\r\n                                    key={item.id}\r\n                                    item={item}\r\n                                />\r\n                            ))}\r\n                        </tbody>\r\n                    </HTMLTable>\r\n                </DialogBody>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BuildHistoryList;\r\n","import React, { ComponentType } from \"react\";\r\nimport {\r\n    NonIdealState,\r\n    HTMLSelect,\r\n    FormGroup,\r\n    Spinner\r\n} from \"@blueprintjs/core\";\r\n\r\nexport const Hideable = <P extends any>(Component: ComponentType<P>) => {\r\n    return (props: P & { hidden?: boolean; children?: React.ReactNode }) => {\r\n        if (props.hidden) {\r\n            return null;\r\n        }\r\n\r\n        return <Component {...props}>{props.children}</Component>;\r\n    };\r\n};\r\n\r\nexport const HideableNonIdealState = Hideable(NonIdealState);\r\n\r\nexport const HideableHtmlSelect = Hideable(HTMLSelect);\r\n\r\nexport const HideableFormGroup = Hideable(FormGroup);\r\n\r\nexport const HideableSpinner = Hideable(Spinner);\r\n","import { Branch } from \"utils/ApiTypes\";\r\n\r\ninterface State {\r\n    visible: boolean;\r\n    branches: Branch[];\r\n    branch: string;\r\n    loading: boolean;\r\n}\r\n\r\ntype BuildQueueReducer = (\r\n    state: State,\r\n    action: Partial<State> //{ type: K; value: State[K] }\r\n) => State;\r\n\r\nconst buildQueueReducer: BuildQueueReducer = (\r\n    state: State,\r\n    action: Partial<State> //{ type: K; value: State[K] }\r\n) => {\r\n    return { ...state, ...action };\r\n};\r\n\r\nexport default buildQueueReducer;\r\n","import React from \"react\";\r\nimport { Branch } from \"utils/ApiTypes\";\r\nimport { HideableFormGroup } from \"components/Common/Hideable\";\r\nimport { HTMLSelect } from \"@blueprintjs/core\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    branches: Branch[];\r\n    onChange: (value: string) => void;\r\n}\r\n\r\nconst SelectBranch = ({ loading, branches, onChange }: Props) => {\r\n    return (\r\n        <HideableFormGroup\r\n            label=\"Branch\"\r\n            labelFor=\"branches\"\r\n            hidden={loading || branches.length === 0}\r\n        >\r\n            <HTMLSelect\r\n                id=\"branches\"\r\n                fill\r\n                onChange={({ currentTarget: { value } }) => onChange(value)}\r\n            >\r\n                {branches.map(branch => (\r\n                    <option key={branch.name} value={branch.name}>\r\n                        {branch.name} ({branch.aheadCount} ahead,{\" \"}\r\n                        {branch.behindCount} behind)\r\n                    </option>\r\n                ))}\r\n            </HTMLSelect>\r\n        </HideableFormGroup>\r\n    );\r\n};\r\n\r\nexport default SelectBranch;\r\n","import React from \"react\";\r\nimport { Variables } from \"utils/ApiTypes\";\r\nimport { FormGroup, InputGroup } from \"@blueprintjs/core\";\r\n\r\ninterface Props {\r\n    variables: Variables;\r\n    visible: boolean;\r\n}\r\n\r\nconst BuildVariableList = (props: Props) => {\r\n    if (!props.visible) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {Object.keys(props.variables || {}).map(key => (\r\n                <FormGroup key={key} label={key} labelFor={`var_${key}`}>\r\n                    <InputGroup\r\n                        id={`var_${key}`}\r\n                        data-lpignore=\"true\"\r\n                        autoComplete=\"off\"\r\n                        readOnly={true} // Should actually check if override is allowed\r\n                        value={props.variables[key].value}\r\n                        onChange={() => {}} // Read-only for now\r\n                    />\r\n                </FormGroup>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BuildVariableList;\r\n","import React, { useReducer } from \"react\";\r\nimport { Dialog, Spinner } from \"@blueprintjs/core\";\r\nimport showToast from \"utils/AppToaster\";\r\nimport { Repository, Variables, Queue } from \"utils/ApiTypes\";\r\nimport { useSquawk } from \"utils/Store\";\r\nimport {\r\n    DialogFooterActions,\r\n    DialogHeader,\r\n    DialogBody\r\n} from \"components/Common/Dialog\";\r\nimport { branchCompare } from \"utils/Comparers\";\r\nimport { convertVariables } from \"utils/Utils\";\r\nimport {\r\n    HideableNonIdealState,\r\n    HideableSpinner\r\n} from \"components/Common/Hideable\";\r\nimport Button from \"components/Common/Button\";\r\nimport buildQueueReducer from \"./BuildQueue.state\";\r\nimport SelectBranch from \"./SelectBranch\";\r\nimport BuildVariableList from \"./BuildVariableList\";\r\n\r\ninterface Props {\r\n    id: number;\r\n    name: string;\r\n    queue: Queue;\r\n    repository: Repository;\r\n    variables: Variables;\r\n}\r\n\r\n// TODO: Refactor this\r\n\r\nconst BuildQueue = (props: Props) => {\r\n    const [{ branch, branches, loading, visible }, dispatch] = useReducer(\r\n        buildQueueReducer,\r\n        {\r\n            visible: false,\r\n            branches: [],\r\n            branch: \"\",\r\n            loading: false\r\n        }\r\n    );\r\n\r\n    const {\r\n        repositoryService,\r\n        buildService,\r\n        tenantId,\r\n        organizationId,\r\n        projectId\r\n    } = useSquawk(\r\n        \"repositoryService\",\r\n        \"buildService\",\r\n        \"organizationId\",\r\n        \"projectId\",\r\n        \"tenantId\"\r\n    );\r\n\r\n    const prepareQueue = async () => {\r\n        dispatch({ visible: true, loading: true });\r\n        const b = (\r\n            (await repositoryService.listBranches(\r\n                tenantId!,\r\n                organizationId!,\r\n                projectId!,\r\n                props.repository.id\r\n            )) || []\r\n        ).sort(branchCompare);\r\n        dispatch({\r\n            branches: b,\r\n            loading: false,\r\n            branch: b.length > 0 ? b[0].name : \"\"\r\n        });\r\n\r\n        // TODO: Copy variables into local state and make editable\r\n    };\r\n\r\n    // Move this method someplace else\r\n    const addToQueue = async () => {\r\n        const request = {\r\n            queue: {\r\n                id: props.queue.id\r\n            },\r\n            definition: {\r\n                id: props.id\r\n            },\r\n            project: {\r\n                id: projectId!\r\n            },\r\n            sourceBranch: `refs/heads/${branch}`, // See if we can't improve on this\r\n            sourceVersion: \"\",\r\n            reason: 1,\r\n            demands: [],\r\n            parameters: JSON.stringify(convertVariables(props.variables))\r\n        };\r\n        await buildService.trigger(tenantId!, organizationId!, request);\r\n        showToast(\"Build queued\", \"success\", \"cog\");\r\n        dispatch({ visible: false });\r\n    };\r\n\r\n    const disabled = props.repository.type !== \"TfsGit\";\r\n\r\n    return (\r\n        <>\r\n            {/* Tooltips are broken on disabled buttons, find a workaround */}\r\n            <Button\r\n                icon=\"play\"\r\n                intent=\"primary\"\r\n                onClick={prepareQueue}\r\n                tooltip={\r\n                    disabled\r\n                        ? `Builds are not supported for repository type ${props.repository.type}`\r\n                        : `Queue build for ${props.name}`\r\n                }\r\n                disabled={disabled}\r\n            />\r\n            <Dialog\r\n                isOpen={visible}\r\n                onClose={() => dispatch({ visible: false })}\r\n                className=\"bp3-dark\"\r\n            >\r\n                <DialogHeader content={`Queue new build for ${props.name}`} />\r\n                <DialogBody>\r\n                    <HideableSpinner\r\n                        size={Spinner.SIZE_LARGE}\r\n                        hidden={!loading}\r\n                    />\r\n                    <HideableNonIdealState\r\n                        hidden={loading || branches.length > 0}\r\n                        title=\"No branches found\"\r\n                    />\r\n                    <SelectBranch\r\n                        loading={loading}\r\n                        branches={branches}\r\n                        onChange={value => dispatch({ branch: value })}\r\n                    />\r\n                    <BuildVariableList\r\n                        variables={props.variables}\r\n                        visible={!loading && branches.length > 0}\r\n                    />\r\n                </DialogBody>\r\n                <DialogFooterActions>\r\n                    <Button\r\n                        text=\"Cancel\"\r\n                        onClick={() => dispatch({ visible: false })}\r\n                    />\r\n                    <Button\r\n                        disabled={branches.length === 0}\r\n                        intent=\"primary\"\r\n                        text=\"Queue build\"\r\n                        onClick={addToQueue}\r\n                    />\r\n                </DialogFooterActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BuildQueue;\r\n","import React, { useState } from \"react\";\r\nimport { Step } from \"utils/ApiTypes\";\r\nimport { FormGroup, InputGroup, AnchorButton } from \"@blueprintjs/core\";\r\n\r\ninterface Props {\r\n    step: Step;\r\n}\r\n\r\nconst BuildDefinitionStep = ({ step }: Props) => {\r\n    const [isOpen, setOpen] = useState(false);\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <AnchorButton\r\n                    minimal\r\n                    rightIcon={isOpen ? \"arrow-down\" : \"arrow-right\"}\r\n                    onClick={() => setOpen(!isOpen)}\r\n                >\r\n                    Step: {step.displayName}\r\n                </AnchorButton>\r\n            </h3>\r\n            {isOpen &&\r\n                Object.keys(step.inputs).map(input => (\r\n                    <FormGroup key={input} label={input} labelFor={input}>\r\n                        <InputGroup\r\n                            id={input}\r\n                            placeholder={step.inputs[input].toString()}\r\n                            readOnly\r\n                        />\r\n                    </FormGroup>\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BuildDefinitionStep;\r\n","import React from \"react\";\r\nimport { Phase } from \"utils/ApiTypes\";\r\nimport { FormGroup, InputGroup } from \"@blueprintjs/core\";\r\nimport BuildDefinitionStep from \"./BuildDefinitionStep\";\r\n\r\ninterface Props {\r\n    phase: Phase;\r\n}\r\n\r\nconst BuildDefinitionPhase = ({ phase }: Props) => {\r\n    return (\r\n        <>\r\n            <h2>Phase: {phase.name}</h2>\r\n            {Object.keys(phase.target.executionOptions).map(opt => (\r\n                <FormGroup key={opt} label={opt} labelFor={opt}>\r\n                    <InputGroup\r\n                        id={opt}\r\n                        placeholder={phase.target.executionOptions[\r\n                            opt\r\n                        ].toString()}\r\n                        readOnly\r\n                    />\r\n                </FormGroup>\r\n            ))}\r\n            {phase.steps.map(step => (\r\n                <BuildDefinitionStep\r\n                    key={`${phase.refName}_${step.displayName}`}\r\n                    step={step}\r\n                />\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BuildDefinitionPhase;\r\n","import React, { useState } from \"react\";\r\nimport { Process } from \"utils/ApiTypes\";\r\nimport Button from \"components/Common/Button\";\r\nimport { Dialog } from \"@blueprintjs/core\";\r\nimport { DialogHeader, DialogBody } from \"components/Common/Dialog\";\r\nimport BuildDefinitionPhase from \"./BuildDefinitionPhase\";\r\n\r\ninterface Props {\r\n    process: Process;\r\n}\r\n\r\nconst BuildDefinitionProcess = (props: Props) => {\r\n    const [open, setOpen] = useState(false);\r\n    return (\r\n        <>\r\n            <Button\r\n                tooltip=\"View build definition\"\r\n                icon=\"code-block\"\r\n                onClick={() => setOpen(true)}\r\n            />\r\n            <Dialog\r\n                isOpen={open}\r\n                onClose={() => setOpen(false)}\r\n                className=\"bp3-dark scroll-dialog large-dialog\"\r\n            >\r\n                <DialogHeader content=\"Build process\" />\r\n                <DialogBody>\r\n                    {props.process.yamlFilename && (\r\n                        <div>\r\n                            This pipeline is defined in{\" \"}\r\n                            {props.process.yamlFilename}\r\n                        </div>\r\n                    )}\r\n                    {props.process.phases &&\r\n                        props.process.phases.map(phase => (\r\n                            <BuildDefinitionPhase\r\n                                key={phase.refName}\r\n                                phase={phase}\r\n                            />\r\n                        ))}\r\n                </DialogBody>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BuildDefinitionProcess;\r\n","import React, { memo } from \"react\";\r\nimport { BuildDefinition } from \"utils/ApiTypes\";\r\nimport { ButtonGroup } from \"@blueprintjs/core\";\r\nimport BuildHistoryList from \"components/Builds/History/BuildHistoryList\";\r\nimport BuildQueue from \"components/Builds/Queue/BuildQueue\";\r\nimport BuildStatusIcon from \"components/Builds/BuildStatusIcon\";\r\nimport BuildDefinitionProcess from \"components/Builds/Process/BuildDefinitionProcess\";\r\n\r\ninterface Props {\r\n    definition: BuildDefinition;\r\n}\r\n\r\nconst BuildDefinitionListItem = ({ definition }: Props) => {\r\n    return (\r\n        <tr key={definition.id}>\r\n            <td>{definition.name}</td>\r\n            <td>{definition.path}</td>\r\n            <td>{definition.repository.name}</td>\r\n            <td>\r\n                {definition.latestBuild && (\r\n                    <>\r\n                        <BuildStatusIcon\r\n                            result={definition.latestBuild.result}\r\n                            status={definition.latestBuild.status}\r\n                        />\r\n                        {definition.latestBuild.buildNumber}\r\n                    </>\r\n                )}\r\n            </td>\r\n            <td>\r\n                <ButtonGroup>\r\n                    <BuildHistoryList\r\n                        id={definition.id}\r\n                        name={definition.name}\r\n                    />\r\n                    <BuildDefinitionProcess process={definition.process} />\r\n                    <BuildQueue\r\n                        id={definition.id}\r\n                        name={definition.name}\r\n                        repository={definition.repository}\r\n                        variables={definition.variables}\r\n                        queue={definition.queue}\r\n                    />\r\n                </ButtonGroup>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default memo(BuildDefinitionListItem);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSquawk, usePending } from \"utils/Store\";\r\nimport { HTMLTable, Spinner } from \"@blueprintjs/core\";\r\nimport HTMLTableNoDataRow from \"components/Common/Table/HTMLTableNoDataRow\";\r\nimport HTMLTableSingleHeader from \"components/Common/Table/HTMLTableSingleHeader\";\r\nimport { buildDefinitionCompare } from \"utils/Comparers\";\r\nimport BuildDefinitionListItem from \"./BuildDefinitionListItem\";\r\nimport Button from \"components/Common/Button\";\r\nimport { BuildDefinition } from \"utils/ApiTypes\";\r\n\r\nconst BuildDefinitionList = () => {\r\n  const { buildService, tenantId, organizationId, projectId } = useSquawk(\r\n    \"buildService\",\r\n    \"tenantId\",\r\n    \"organizationId\",\r\n    \"projectId\"\r\n  );\r\n\r\n  const projectsLoading = usePending(\"projects\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [definitions, setDefinitions] = useState<BuildDefinition[]>([]);\r\n\r\n  const load = async () => {\r\n    if (!tenantId || !organizationId || !projectId) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    const defs = await buildService.listDefinitions(\r\n      tenantId!,\r\n      organizationId!,\r\n      projectId!\r\n    );\r\n    setDefinitions(defs);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    load();\r\n    const id = window.setInterval(() => {\r\n      load();\r\n    }, 60000);\r\n\r\n    return () => window.clearInterval(id);\r\n    // eslint-disable-next-line\r\n  }, [projectId]);\r\n\r\n  if (loading || projectsLoading) {\r\n    return <Spinner size={Spinner.SIZE_LARGE} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        icon=\"refresh\"\r\n        disabled={loading}\r\n        tooltip=\"Refresh builds\"\r\n        onClick={load}\r\n      />\r\n      <HTMLTable bordered striped style={{ width: \"100%\" }}>\r\n        <HTMLTableSingleHeader>\r\n          <th>Name</th>\r\n          <th>Path</th>\r\n          <th>Repository</th>\r\n          <th>Latest build</th>\r\n          <th></th>\r\n        </HTMLTableSingleHeader>\r\n        <tbody>\r\n          <HTMLTableNoDataRow\r\n            columns={5}\r\n            text=\"This project does not have any builds defined\"\r\n            visible={definitions.length === 0}\r\n          />\r\n          {definitions.sort(buildDefinitionCompare).map(b => (\r\n            <BuildDefinitionListItem key={b.id} definition={b} />\r\n          ))}\r\n        </tbody>\r\n      </HTMLTable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BuildDefinitionList;\r\n","import React, {useState} from 'react';\r\nimport {Approval} from 'utils/ApiTypes';\r\nimport Button from 'components/Common/Button';\r\nimport {Dialog, Checkbox} from '@blueprintjs/core';\r\nimport {DatePicker} from '@blueprintjs/datetime';\r\nimport {\r\n  DialogHeader,\r\n  DialogBody,\r\n  DialogFooterActions,\r\n} from 'components/Common/Dialog';\r\nimport {range} from 'utils/Utils';\r\nimport Dropdown from 'components/Common/Dropdown';\r\n\r\ninterface Props {\r\n  approvals: Approval[];\r\n}\r\n\r\nconst hours = range(0, 24).map(h => ({\r\n  key: h,\r\n  value: h,\r\n  text: h.toString(),\r\n}));\r\n\r\nconst minutes = range(0, 4, 15).map(m => ({\r\n  key: m,\r\n  value: m,\r\n  text: m.toString(),\r\n}));\r\n\r\nconst getFutureDate = () => {\r\n  const d = new Date();\r\n  d.setMonth(d.getMonth() + 1);\r\n  return d;\r\n};\r\n\r\nconst ReleaseApprove = (props: Props) => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [defer, setDefer] = useState(false);\r\n\r\n  if (props.approvals.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const title =\r\n    props.approvals.length === 1\r\n      ? props.approvals[0].releaseEnvironment.name\r\n      : 'Approve multiple';\r\n\r\n  const multiple = props.approvals.length > 1;\r\n\r\n  const tooltip =\r\n    props.approvals.length === 1\r\n      ? `Approve release to ${props.approvals[0].releaseEnvironment.name}`\r\n      : 'Select releases to approve';\r\n\r\n  return (\r\n    <>\r\n      <Button text={title} tooltip={tooltip} onClick={() => setVisible(true)} />\r\n      <Dialog\r\n        isOpen={visible}\r\n        onClose={() => setVisible(false)}\r\n        className=\"bp3-dark\">\r\n        <DialogHeader content=\"Approve release\" />\r\n        <DialogBody>\r\n          {props.approvals.map(approval => (\r\n            <div key={approval.id}>\r\n              {multiple && <Checkbox />}\r\n              {approval.releaseDefinition.name} to{' '}\r\n              {approval.releaseEnvironment.name}\r\n            </div>\r\n          ))}\r\n          <div>\r\n            <Checkbox\r\n              title=\"Defer release\"\r\n              checked={defer}\r\n              onChange={() => setDefer(!defer)}>\r\n              Defer release\r\n            </Checkbox>\r\n          </div>\r\n          {defer && (\r\n            <div>\r\n              <DatePicker\r\n                locale=\"sv-se\"\r\n                dayPickerProps={{firstDayOfWeek: 1}}\r\n                minDate={new Date()}\r\n                maxDate={getFutureDate()}\r\n              />\r\n              <Dropdown<number>\r\n                loading={false}\r\n                value={0}\r\n                items={hours}\r\n                onChange={() => {}}\r\n                noData=\"\"\r\n              />\r\n              <Dropdown<number>\r\n                loading={false}\r\n                value={0}\r\n                items={minutes}\r\n                onChange={() => {}}\r\n                noData=\"\"\r\n              />\r\n            </div>\r\n          )}\r\n        </DialogBody>\r\n        <DialogFooterActions>\r\n          <Button text=\"Cancel\" onClick={() => setVisible(false)} />\r\n          <Button intent=\"primary\" text=\"Approve\" />\r\n        </DialogFooterActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReleaseApprove;\r\n","import React from \"react\";\r\nimport Button from \"components/Common/Button\";\r\n\r\nconst ReleaseDefinitionProcess = () => {\r\n  return <Button tooltip=\"View release definition\" icon=\"code-block\" />;\r\n};\r\n\r\nexport default ReleaseDefinitionProcess;\r\n","import React from \"react\";\r\nimport Button from \"components/Common/Button\";\r\n\r\nconst ReleaseHistoryList = () => {\r\n  return <Button tooltip=\"View history\" icon=\"history\" />;\r\n};\r\n\r\nexport default ReleaseHistoryList;\r\n","import React from \"react\";\r\nimport Button from \"components/Common/Button\";\r\n\r\nconst CreateRelease = () => {\r\n  return <Button icon=\"play\" intent=\"primary\" tooltip=\"Create new release\" />;\r\n};\r\n\r\nexport default CreateRelease;\r\n","import React from \"react\";\r\nimport { ReleaseDefinition, Approval } from \"utils/ApiTypes\";\r\nimport ReleaseApprove from \"../Approval/ReleaseApprove\";\r\nimport ReleaseDefinitionProcess from \"../Process/ReleaseDefinitionProcess\";\r\nimport ReleaseHistoryList from \"../History/ReleaseHistoryList\";\r\nimport CreateRelease from \"../Create/CreateRelease\";\r\n\r\ninterface Props {\r\n  definition: ReleaseDefinition;\r\n  approvals: Approval[];\r\n}\r\n\r\nconst ReleaseDefinitionListItem = (props: Props) => {\r\n  const { definition, approvals } = props;\r\n  return (\r\n    <tr>\r\n      <td>{definition.name}</td>\r\n      <td>{definition.path}</td>\r\n      <td>\r\n        {approvals.map(approval => (\r\n          <ReleaseApprove key={approval.id} approvals={[approval]} />\r\n        ))}\r\n      </td>\r\n      <td>\r\n        <ReleaseHistoryList />\r\n        <ReleaseDefinitionProcess />\r\n        <CreateRelease />\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ReleaseDefinitionListItem;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {useSquawk, usePending} from 'utils/Store';\r\nimport {Spinner, HTMLTable, ButtonGroup} from '@blueprintjs/core';\r\nimport HTMLTableSingleHeader from 'components/Common/Table/HTMLTableSingleHeader';\r\nimport HTMLTableNoDataRow from 'components/Common/Table/HTMLTableNoDataRow';\r\nimport {releaseDefinitionCompare} from 'utils/Comparers';\r\nimport {ReleaseDefinition, Approval} from 'utils/ApiTypes';\r\nimport Button from 'components/Common/Button';\r\nimport ReleaseDefinitionListItem from './ReleaseDefinitionListItem';\r\nimport ReleaseApprove from '../Approval/ReleaseApprove';\r\n\r\nconst ReleaseDefinitionList = () => {\r\n  const {releaseService, tenantId, organizationId, projectId} = useSquawk(\r\n    'releaseService',\r\n    'tenantId',\r\n    'organizationId',\r\n    'projectId',\r\n  );\r\n\r\n  const projectsLoading = usePending('projects');\r\n  const [loading, setLoading] = useState(true);\r\n  const [state, setState] = useState<[ReleaseDefinition[], Approval[]]>([\r\n    [],\r\n    [],\r\n  ]);\r\n\r\n  const load = async () => {\r\n    if (!tenantId || !organizationId || !projectId) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    const response = await Promise.all([\r\n      await releaseService.listDefinitions(\r\n        tenantId!,\r\n        organizationId!,\r\n        projectId!,\r\n      ),\r\n      await releaseService.listApprovals(\r\n        tenantId!,\r\n        organizationId!,\r\n        projectId!,\r\n      ),\r\n    ]);\r\n    setState(response);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    load();\r\n    const id = window.setInterval(() => {\r\n      if (loading || projectsLoading) {\r\n        return;\r\n      }\r\n      load();\r\n    }, 60000);\r\n\r\n    return () => window.clearInterval(id);\r\n    // TODO: Figure this out\r\n    // eslint-disable-next-line\r\n  }, [projectId]);\r\n\r\n  if (loading || projectsLoading) {\r\n    return <Spinner size={Spinner.SIZE_LARGE} />;\r\n  }\r\n\r\n  const [releaseDefinitions, approvals] = state;\r\n\r\n  return (\r\n    <div>\r\n      <ButtonGroup>\r\n        <Button\r\n          icon=\"refresh\"\r\n          disabled={loading}\r\n          tooltip=\"Refresh builds\"\r\n          onClick={load}\r\n        />\r\n        {approvals.length > 1 && <ReleaseApprove approvals={approvals} />}\r\n      </ButtonGroup>\r\n      <HTMLTable bordered striped style={{width: '100%'}}>\r\n        <HTMLTableSingleHeader>\r\n          <th>Name</th>\r\n          <th>Path</th>\r\n          <th>Approvals</th>\r\n          <th></th>\r\n        </HTMLTableSingleHeader>\r\n        <tbody>\r\n          <HTMLTableNoDataRow\r\n            columns={4}\r\n            text=\"This project does not have any releases defined\"\r\n            visible={releaseDefinitions.length === 0}\r\n          />\r\n          {releaseDefinitions.sort(releaseDefinitionCompare).map(r => (\r\n            <ReleaseDefinitionListItem\r\n              key={r.id}\r\n              definition={r}\r\n              approvals={approvals.filter(a => a.releaseDefinition.id === r.id)}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </HTMLTable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReleaseDefinitionList;\r\n","import React, { useState } from \"react\";\r\nimport { Tabs, Tab } from \"@blueprintjs/core\";\r\nimport BuildDefinitionList from \"components/Builds/Definitions/BuildDefinitionList\";\r\nimport ReleaseDefinitionList from \"components/Releases/Definitions/ReleaseDefinitionList\";\r\n\r\nconst MainPage = () => {\r\n  const {\r\n    location: { hash }\r\n  } = window;\r\n\r\n  const pathSegments = (hash || \"builds\").split(\"/\");\r\n\r\n  const [selected, setSelected] = useState(\r\n    \"#\" + pathSegments[pathSegments.length - 1]\r\n  );\r\n\r\n  return (\r\n    <Tabs\r\n      selectedTabId={selected}\r\n      onChange={id => {\r\n        setSelected(id.toString());\r\n        const pathSegs = window.location.hash.split(\"/\");\r\n        pathSegs[pathSegs.length - 1] = id.toString().substr(1);\r\n        window.location.hash = pathSegs.join(\"/\");\r\n      }}\r\n    >\r\n      <Tab id=\"#builds\" title=\"Builds\" panel={<BuildDefinitionList />} />\r\n      <Tab id=\"#releases\" title=\"Releases\" panel={<ReleaseDefinitionList />} />\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\r\nimport { Dialog, Button, Spinner } from \"@blueprintjs/core\";\r\nimport { DialogHeader, DialogBody } from \"components/Common/Dialog\";\r\nimport { listTenants } from \"utils/Actions\";\r\nimport { usePending } from \"utils/Store\";\r\n\r\nconst Login = () => {\r\n    const loading = usePending(\"tenants\");\r\n    const handleLogin = () => {\r\n        listTenants();\r\n    };\r\n    return (\r\n        <div className=\"bp3-dark app-root\">\r\n            <Dialog isOpen className=\"bp3-dark\">\r\n                <DialogHeader content=\"Please log in\" />\r\n                <DialogBody>\r\n                    {loading && <Spinner size={Spinner.SIZE_LARGE} />}\r\n                    <Button\r\n                        icon=\"log-in\"\r\n                        text=\"Click here to sign in to your Microsoft Account\"\r\n                        onClick={handleLogin}\r\n                        disabled={loading}\r\n                    />\r\n                </DialogBody>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { usePending, useSquawk } from \"utils/Store\";\r\nimport { Dialog, Button } from \"@blueprintjs/core\";\r\nimport {\r\n    DialogHeader,\r\n    DialogBody,\r\n    DialogFooterActions\r\n} from \"components/Common/Dialog\";\r\nimport { addTenantFilter } from \"utils/Actions\";\r\n\r\nconst SuggestAddFilter = () => {\r\n    const loading = {\r\n        organizations: usePending(\"organizations\"),\r\n        projects: usePending(\"projects\")\r\n    };\r\n    const { organizations, tenantId, tenants } = useSquawk(\r\n        \"organizations\",\r\n        \"tenantId\",\r\n        \"tenants\"\r\n    );\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const tenant = tenants.find(t => t.tenantId === tenantId);\r\n\r\n    useEffect(() => {\r\n        setOpen(\r\n            !loading.organizations &&\r\n                !loading.projects &&\r\n                organizations.length === 0\r\n        );\r\n    }, [loading.organizations, loading.projects, organizations]);\r\n\r\n    if (!tenant) {\r\n        return null;\r\n    }\r\n\r\n    const setFilter = () => {\r\n        addTenantFilter(tenant);\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Dialog isOpen={open} className=\"bp3-dark\">\r\n            <DialogHeader content=\"Filter current tenant?\" />\r\n            <DialogBody>\r\n                The tenant \"{tenant.displayName}\" does not appear to have any\r\n                Azure DevOps organizations, would you like to add a filter to\r\n                remove it?\r\n            </DialogBody>\r\n            <DialogFooterActions>\r\n                <Button text=\"Cancel\" onClick={() => setOpen(false)} />\r\n                <Button text=\"Ok\" intent=\"primary\" onClick={setFilter} />\r\n            </DialogFooterActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default SuggestAddFilter;\r\n","import React from \"react\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\r\nimport \"App.css\";\r\nimport TopMenu from \"components/TopMenu/TopMenu\";\r\nimport MainPage from \"components/Main/MainPage\";\r\nimport { useSquawk } from \"utils/Store\";\r\nimport Login from \"components/Main/Login\";\r\nimport SuggestAddFilter from \"components/Organizations/SuggestAddFilter\";\r\n\r\nconst App = () => {\r\n  const { account } = useSquawk(\"account\");\r\n  if (!account) {\r\n    return <Login />;\r\n  }\r\n  return (\r\n    <div className=\"bp3-dark app-root\">\r\n      <TopMenu />\r\n      <MainPage />\r\n      <SuggestAddFilter />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}